package core.schedule.ui.dailySchedule;

import core.schedule.DailySchedule;
import core.schedule.task.Task;
import core.schedule.ui.ScheduleUI;
import core.schedule.ui.TaskPanel;
import core.utils.Hour;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import javax.swing.BoxLayout;
import javax.swing.SwingConstants;

/**
 *
 * @author kiira
 */
public class DailyScheduleUI extends javax.swing.JPanel implements ScheduleUI {

    private int hoursSize;
    private int timeFraction;
    private DailySchedule schedule;
    private int direction;
    private Map<Task, Color> colors;

    /** Creates new form DailyScheduleUI */
    public DailyScheduleUI( DailySchedule schedule, int direction ) {
        this.schedule = schedule;
        this.direction = direction;
        this.hoursSize = 100;
        this.timeFraction = 60;

        initComponents();

        //cambios dependiendo de la direcci贸n
        if ( this.direction == SwingConstants.HORIZONTAL ) {
            this.jPMain.remove( this.hSLateral );
            this.jPMain.add( this.hSLateral, BorderLayout.NORTH );

            this.jPTasks.setLayout( new BoxLayout( jPTasks, BoxLayout.X_AXIS ) );
        } else
            this.jPTasks.setLayout( new BoxLayout( jPTasks, BoxLayout.Y_AXIS ) );

        //inicializamos la lista de colores
        this.colors = new HashMap<Task, Color>( schedule.size() );
        Random ranGen = new Random();

        for ( Task task : schedule )
            this.colors.put( task, new java.awt.Color( ranGen.nextInt() ) );

        //generamos los task panels
        initTasksPanel();
    }

    public DailyScheduleUI( DailySchedule schedule ) {
        this( schedule, SwingConstants.VERTICAL );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings ( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSPMain = new javax.swing.JScrollPane();
        jPMain = new javax.swing.JPanel();
        jPTasks = new javax.swing.JPanel();
        hSLateral = new core.schedule.ui.HoursStrip( this.hoursSize, this.timeFraction,
            this.direction );

        setLayout(new java.awt.BorderLayout());

        jSPMain.setName("jSPMain"); // NOI18N

        jPMain.setName("jPMain"); // NOI18N
        jPMain.setLayout(new java.awt.BorderLayout());

        jPTasks.setName("jPTasks"); // NOI18N
        jPTasks.setLayout(null);
        jPMain.add(jPTasks, java.awt.BorderLayout.CENTER);

        hSLateral.setName("hSLateral"); // NOI18N
        jPMain.add(hSLateral, java.awt.BorderLayout.WEST);

        jSPMain.setViewportView(jPMain);

        add(jSPMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initTasksPanel() {
        int diff, last = 0;

        for ( Task current : schedule ) {
            //creamos un task panel vacio por cada fracci贸n de tiempo en el
            //espacio restante
            diff = current.getInitHour().getHourInMinutes() - last;

            this.fillSpace( diff, last );

            //creamos el panel para la task actual
            this.jPTasks.
                    add(
                    new TaskPanel( this, current, this.hoursSize,
                                   this.timeFraction,
                                   this.colors.get( current ),
                                   this.direction ) );

            //seteamos last para la pr贸xima ronda
            last = current.
                    getEndHour().getHourInMinutes();
        }

        //agregamos tasks panels para rellenar el resto de lugar
        diff = Hour.HOURS * Hour.MINS - last;

        this.fillSpace( diff, last );
    }

    private void fillSpace( int diff, int last ) {
        int time, irregular;

        //primero quitamos cualquier porci贸n irregular al comienzo del espacio
        irregular = this.timeFraction - last % this.timeFraction;

        if ( irregular > 0 && irregular < diff ) {
            diff -= irregular;

            this.jPTasks.add( new TaskPanel( irregular, this.hoursSize,
                                             this.timeFraction,
                                             this.direction ) );
        }

        //continuamos agregando intervalos regulares para completar el espacio
        while ( diff > 0 ) {
            if ( diff > this.timeFraction )
                time = this.timeFraction;
            else
                time = diff;

            diff -= this.timeFraction;

            this.jPTasks.add( new TaskPanel( time, this.hoursSize,
                                             this.timeFraction,
                                             this.direction ) );
        }
    }

    public static void main( String[] args ) {
        javax.swing.JFrame frame = new javax.swing.JFrame();

        DailySchedule instance = new DailySchedule();

        instance.createTask( new Hour( 15 ), new Hour( 16 ), "Prueba1" );
        instance.createTask( new Hour( 15, 30 ), new Hour( 17 ), "Prueba2" );
        instance.createTask( new Hour( 16 ), new Hour( 17 ), "Prueba3" );
        instance.createTask( new Hour( 11 ), new Hour( 15 ), "Prueba4" );
        instance.createTask( new Hour( 17, 25 ), new Hour( 18, 3 ),
                             "Intervalo irregular" );
        instance.createTask( new Hour( 18, 11 ), new Hour( 19, 5 ),
                             "Intervalo irregular" );
        instance.createTask( new Hour( 21, 10 ), new Hour( 22, 7 ),
                             "Intervalo irregular" );

        frame.setDefaultCloseOperation( javax.swing.JFrame.EXIT_ON_CLOSE );
        frame.setSize( 800, 600 );
        frame.add( new DailyScheduleUI( instance ) );

        frame.setVisible( true );
    }

    @Override
    public void removeTask( Task task ) {
        this.schedule.removeTask( task );
        this.colors.remove( task );
        this.jPTasks.removeAll();
        this.initTasksPanel();
        this.revalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private core.schedule.ui.HoursStrip hSLateral;
    private javax.swing.JPanel jPMain;
    private javax.swing.JPanel jPTasks;
    private javax.swing.JScrollPane jSPMain;
    // End of variables declaration//GEN-END:variables
}
