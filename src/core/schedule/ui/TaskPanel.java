/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package core.schedule.ui;

import core.schedule.task.Task;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.event.ActionListener;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author kiira
 */
public class TaskPanel extends javax.swing.JPanel implements ActionListener {

    private Color baseColor;
    private Task task;
    private ScheduleUI scheduleUI;

    /** Creates new form TaskPanel */
    public TaskPanel( ScheduleUI ui, Task task, int hoursHeight,
                      int timeFraction, Color color ) {
        initComponents();
        this.scheduleUI = ui;
        this.task = task;
        this.baseColor = color;

        //seteamos el popup
        this.setComponentPopupMenu( jPMTask );

        //calculamos y seteamos la altura de acuerdo a los parámetros
        int height = Math.
                round(
                (float)task.getDurationInMinutes() * hoursHeight / timeFraction );
        this.setPreferredSize( new Dimension( this.getPreferredSize().width,
                                              height ) );

        //creamos y asignamos el borde
        this.setBorder( BorderFactory.
                createMatteBorder( 0, 0, 1, 0, Color.black ) );

        //seteamos la descripción de la task y cambiamos el color del mismo
        this.jLDescription.setText( task.getDescription() );
        this.jLDescription.setForeground(
                ( color.getRGB() < Color.black.getRGB() / 2 )
                ? Color.white
                : Color.black );

        //asignamos en el tooltip los horarios reales
        this.setToolTipText( String.format( "Desde las %s hasta las %s",
                                            task.getInitHour(), task.
                getEndHour() ) );
    }

    public TaskPanel( ScheduleUI ui, Task task, int timeFraction,
                      int hoursHeight ) {
        this( ui, task, hoursHeight, timeFraction, new Color( 254, 79, 79 ) );
    }

    public TaskPanel( int time, int timeFraction, int hoursHeight ) {
        initComponents();

        this.setPreferredSize(
                new Dimension(
                this.getPreferredSize().width,
                Math.round( (float)time * hoursHeight / timeFraction ) ) );
        this.setBorder( BorderFactory.
                createMatteBorder( 0, 0, 1, 0, Color.black ) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings ( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPMTask = new javax.swing.JPopupMenu();
        jMIEliminar = new javax.swing.JMenuItem();
        jLDescription = new javax.swing.JLabel();

        jPMTask.setName("jPMTask"); // NOI18N

        jMIEliminar.setText("Eliminar");
        jMIEliminar.setName("jMIEliminar"); // NOI18N
        jMIEliminar.addActionListener(this);
        jPMTask.add(jMIEliminar);

        setLayout(new java.awt.BorderLayout());

        jLDescription.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLDescription.setName("jLDescription"); // NOI18N
        add(jLDescription, java.awt.BorderLayout.CENTER);
    }

    // Code for dispatching events from components to event handlers.

    public void actionPerformed(java.awt.event.ActionEvent evt) {
        if (evt.getSource() == jMIEliminar) {
            TaskPanel.this.jMIEliminarActionPerformed(evt);
        }
    }// </editor-fold>//GEN-END:initComponents

    private void jMIEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEliminarActionPerformed
        if ( JOptionPane.showConfirmDialog( (JComponent)scheduleUI,
                                            "¿Desea eliminar la Task?",
                                            "Eliminar Task",
                                            JOptionPane.YES_NO_OPTION,
                                            JOptionPane.QUESTION_MESSAGE )
             == JOptionPane.YES_OPTION )
            this.scheduleUI.removeTask( this.task );
    }//GEN-LAST:event_jMIEliminarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLDescription;
    private javax.swing.JMenuItem jMIEliminar;
    private javax.swing.JPopupMenu jPMTask;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent( Graphics g ) {
        super.paintComponent( g );

        //si no hay task, no ponemos ningún color
        if ( this.task == null )
            return;

        //casteamos el graphics
        Graphics2D g2 = (Graphics2D)g;

        //generamos el gradiente y lo asignamos        
        Color firstColor = this.baseColor.brighter();
        Color secondColor = this.baseColor.darker();

        Paint gradient = new GradientPaint(
                new Point( 0, this.getHeight() * 1 / 4 ), firstColor,
                new Point( 0, this.getHeight() ), secondColor );

        g2.setPaint( gradient );

        //pintamos
        g2.fillRect( 0, 0, this.getWidth(), this.getHeight() );

        //dibujamos un borde del color base
        g2.setPaint( this.baseColor );

        g2.drawLine( 0, 0, 0, this.getHeight() );
        g2.drawLine( 0, 0, this.getWidth(), 0 );
        g2.drawLine( 0, this.getHeight(), this.getWidth(), this.getHeight() );
        g2.drawLine( this.getWidth(), 0, this.getWidth(), this.getHeight() );
    }

}
