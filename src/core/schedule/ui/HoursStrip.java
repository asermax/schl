package core.schedule.ui;

import core.utils.Hour;
import java.awt.Color;
import java.awt.Dimension;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

/**
 *
 * @author kiira
 */
public class HoursStrip extends javax.swing.JPanel {

    private static final int DEFAULT_SIZE = 100;
    private static final int DEFAULT_TIME_FRACTION = 60;

    /** Creates new form HoursStrip */
    public HoursStrip( int size, int timeFraction, int direction ) {
        if ( direction != SwingConstants.HORIZONTAL
             && direction != SwingConstants.VERTICAL )
            throw new IllegalArgumentException(
                    "Solo se puede especificar HORIZONTAL o VERTICAL"
                    + " como dirección." );

        initComponents();

        //dependiendo de la dirección, generamos el strip
        if ( direction == SwingConstants.HORIZONTAL )
            this.initializeHorizontalStrip( size, timeFraction );
        else
            this.initializeVerticalStrip( size, timeFraction );
    }

    public HoursStrip( int size, int timeFraction ) {
        this( size, timeFraction, SwingConstants.VERTICAL );
    }

    public HoursStrip( int size ) {
        this( size, HoursStrip.DEFAULT_TIME_FRACTION );
    }

    public HoursStrip() {
        this( HoursStrip.DEFAULT_SIZE );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings ( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPMain = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPMain.setName("jPMain"); // NOI18N
        jPMain.setLayout(null);
        add(jPMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void initializeVerticalStrip( int size, int timeFraction ) {
        //asignamos el layout al strip de acuerdo a la dirección
        jPMain.setLayout( new BoxLayout( jPMain, BoxLayout.Y_AXIS ) );

        //creamos los labels        
        Hour h = new Hour();
        JLabel label;
        Border border = BorderFactory.
                createMatteBorder( 0, 0, 1, 1, Color.black );
        Dimension dim;

        //según el fraccionamiento de tiempo, generamos un label por cada
        //intervalo
        for ( int i = Hour.HOURS * Hour.MINS / timeFraction; i > 0; i-- ) {
            //creamos el label
            label = new JLabel( String.format( "<html><br/>%s</html>",
                                               h.toString() ) );

            //creamos la dimensión 
            dim = new Dimension( label.getPreferredSize().width + 10,
                                 size );

            //asignamos los valores generados
            label.setVerticalAlignment( JLabel.TOP );
            label.setMaximumSize( dim );
            label.setPreferredSize( dim );

            //asignamos el border
            label.setBorder( border );

            //agregamos el nuevo label
            this.jPMain.add( label );

            //avanzamos el horario en la cantidad asignada por el fraccionamiento
            h.addMins( timeFraction );
        }
    }

    private void initializeHorizontalStrip( int size, int timeFraction ) {
        //asignamos el layout al strip de acuerdo a la dirección
        jPMain.setLayout( new BoxLayout( jPMain, BoxLayout.X_AXIS ) );

        //creamos los labels        
        Hour h = new Hour();
        JLabel label;
        Border border = BorderFactory.
                createMatteBorder( 0, 0, 1, 1, Color.black );
        Dimension dim;

        //según el fraccionamiento de tiempo, generamos un label por cada
        //intervalo
        for ( int i = Hour.HOURS * Hour.MINS / timeFraction; i > 0; i-- ) {
            label = new JLabel( String.format( "<html>&nbsp;&nbsp;%s</html>", h.
                    toString() ) );

            dim = new Dimension( size,
                                 label.getPreferredSize().height + 10 );

            //asignamos los valores generados
            label.setHorizontalAlignment( JLabel.LEFT );
            label.setMaximumSize( dim );
            label.setPreferredSize( dim );

            //asignamos el border
            label.setBorder( border );

            //agregamos el nuevo label
            this.jPMain.add( label );

            //avanzamos el horario en la cantidad asignada por el fraccionamiento
            h.addMins( timeFraction );
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPMain;
    // End of variables declaration//GEN-END:variables
}
